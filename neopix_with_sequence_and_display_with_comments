//right now the tempo is very unsteady, shifts obviously when you pot is fastest(done)
//select is slow too when the pot is slow(done)
//button select shifts back and forth when fast(done)
//button select compeletly off occasionally(done)
//also these pots pain in the ass(done)
//when tempo is extremely fast it will get extremely unsteady

//last thing to do:
//count tempo(done)
//display the thing on quad(done)
//

#include <Wire.h>
#include "Adafruit_LEDBackpack.h"
#include "Adafruit_GFX.h"

Adafruit_AlphaNum4 alpha4 = Adafruit_AlphaNum4();

#include <Adafruit_NeoPixel.h>

// replace the 32 below with whatever pin your Neopixel is connected to
Adafruit_NeoPixel neopixel = Adafruit_NeoPixel(8, 33, NEO_GRB);
//things required for all of this
//adding a pot for tempo(done) test it (done)
//adding light sequencing (done)
//let select happen
//display tempo by dividing 60/potval
//adding one midi send
//adding double matrix for the thing
//adding midi channels for kick, snare, close hats, claps, and maybe toms
int tempo = 1000;
int potChannel = analogRead(A17); //for switching channel
int potSelect = analogRead(A18); //this is for browsing neo lights
int potTempo = analogRead(A16); //for changing tempo
int mappedChannel = 0;
int mappedSelect = 0;
int selectButton = 30; //port
bool buttonState = LOW;
bool lastButtonState = LOW;
bool buttonOn[4][8] = {{false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false}, {false, false, false, false, false, false, false, false}};
int currentStep = 0;
int totalStep = 8;//this is a eight step drum sequencer
unsigned long lastStepTime = 0;
unsigned long lastStepTime1 = 0;
int stepLength = 0;

//using steplength to program sequences, tempo
void sequence() {
  stepLength = analogRead(A18); //making the tempo speed the third pot
  stepLength=map(stepLength,0,1023,150,1000); //define sequence length being in the length of calculated bpm
  Serial.println(stepLength);
  if (millis() > lastStepTime + stepLength) {
    //need to add one more signal send for channel 4(done)
    currentStep = currentStep + 1;

    if (currentStep == totalStep) {
      currentStep = 0;
    }

    
    lastStepTime = millis();

//define the notes triggered in each channel

    if (buttonOn[0][currentStep] == true) {
      usbMIDI.sendNoteOn(36, 127, 1);
    }
    else {
      usbMIDI.sendNoteOff(36, 0, 1);
    }
    if (buttonOn[1][currentStep] == true) {
      usbMIDI.sendNoteOn(38, 127, 1);
    }
    else {
      usbMIDI.sendNoteOff(38, 0, 1);
    }

    if (buttonOn[2][currentStep] == true) {
      usbMIDI.sendNoteOn(42, 127, 1);
    }
    else {
      usbMIDI.sendNoteOff(42, 0, 1);
    }

    if (buttonOn[3][currentStep] == true) {
      usbMIDI.sendNoteOn(47, 127, 1);
    }
    else {
      usbMIDI.sendNoteOff(47, 0, 1);
    }


  }

  if (currentStep == totalStep) {
    currentStep = 0;
  }
  //  neopixel.show();
}

//check if button is pressed, the mapped things are in checkNeo
void checkButton() {
  lastButtonState = buttonState; 
  buttonState = digitalRead(selectButton);
  if (lastButtonState == LOW and buttonState == HIGH) {//if the button is pressed
    buttonOn[mappedChannel][mappedSelect] = !buttonOn[mappedChannel][mappedSelect];
    delay(5);
  } else if (lastButtonState == HIGH and buttonState == LOW) {//unpressed
    delay(5);
  }
}

//this will turn neopixel on and off
void checkNeo() {
  //define what these mapped things are
  mappedChannel = map(analogRead(A17), 50, 950, 0, 3);
  mappedSelect = map(analogRead(A16), 950, 50, 0, 7);
  mappedChannel = constrain(mappedChannel, 0, 3);
  mappedSelect = constrain(mappedSelect, 0, 7);
  
  for (int i = 0; i < 8; i++) {
//define light color of the channels
    if (i == currentStep) {
      if (mappedChannel == 0) {
        neopixel.setPixelColor(i, 0, 0, 15);
      }
      if (mappedChannel == 1) {
        neopixel.setPixelColor(i, 15, 0, 15);
      }
      if (mappedChannel == 2) {
        neopixel.setPixelColor(i, 0, 15, 15);
      }
      if (mappedChannel == 3) {
        neopixel.setPixelColor(i, 15, 25, 35);
      }
//define when color of the light when selected 
    }
    else if (buttonOn[mappedChannel][i] == true and i == mappedSelect) {
      neopixel.setPixelColor(i, 15, 15, 0);
    }
    else if (buttonOn[mappedChannel][i] == true) {
      neopixel.setPixelColor(i, 15, 0, 0);
    }
    else if (i == mappedSelect) {
      neopixel.setPixelColor(i, 0, 15, 0);
    }
    else { //turning off
      neopixel.setPixelColor(i, 0, 0, 0);
    }
  }
  neopixel.show();
}




void setup() {
  pinMode(selectButton, INPUT);
  Serial.begin(9600);
  neopixel.begin();
  neopixel.clear();
  neopixel.setBrightness(50);
  neopixel.show();
  alpha4.begin(0x70);
}
//browsing the eight step sequence
void browseSequence () {
  mappedSelect = map(analogRead(A16), 0, 950, 0, 7);

  // turn neopixel red
  //  neopixel.clear();
  //  neopixel.setPixelColor(mappedSelect, 0, 0, 255);
  //  neopixel.show();
  delay(analogRead(A18));
}

//void selectSequence() {
//  mappedSelect = map(analogRead(A16), 0, 1023, 0, 7);
//
//  // turn neopixel red
//  if (digitalRead(selectButton) == HIGH) {
//    //Serial.println()
//    neopixel.setPixelColor(mappedSelect, 0, 0, 255);
//    neopixel.show();
//  }
//  delay(analogRead(A18));
//}

//test if buton works, and it does!
void testButton() {
  if (digitalRead(selectButton) == HIGH) {
    Serial.println("this works");
    delay(50);
  }
}

//now here counts the tempo and display stuff on quad
void tempoCount() {
  tempo = 60000 / (2 * stepLength);
//  Serial.println("the tempo is");
//  Serial.println(tempo);
  writeNumberToDisplay(tempo);
  //delay(1000);
}

void loop() {
  //Serial.println(mappedSelect);
  //browseSequence();
  checkButton();
  checkNeo();
  sequence();
  tempoCount();

}

//the things I would do to help display
void writeNumberToDisplay(int n) {

  alpha4.clear();

  char buf[4];
  sprintf(buf, "%d", n);

  if (n < 10) {
    alpha4.writeDigitAscii(0, ' ');
    alpha4.writeDigitAscii(1, ' ');
    alpha4.writeDigitAscii(2, ' ');
    alpha4.writeDigitAscii(3, buf[0]);
  } else if (n < 100) {
    alpha4.writeDigitAscii(0, ' ');
    alpha4.writeDigitAscii(1, ' ');
    alpha4.writeDigitAscii(2, buf[0]);
    alpha4.writeDigitAscii(3, buf[1]);
  } else if (n < 1000) {
    alpha4.writeDigitAscii(0, ' ');
    alpha4.writeDigitAscii(1, buf[0]);
    alpha4.writeDigitAscii(2, buf[1]);
    alpha4.writeDigitAscii(3, buf[2]);
  } else {
    alpha4.writeDigitAscii(0, buf[0]);
    alpha4.writeDigitAscii(1, buf[1]);
    alpha4.writeDigitAscii(2, buf[2]);
    alpha4.writeDigitAscii(3, buf[3]);
  }

  alpha4.writeDisplay();
}

void writeTextToDisplay(char txt[5]) {
  alpha4.writeDigitAscii(0, txt[0]);
  alpha4.writeDigitAscii(1, txt[1]);
  alpha4.writeDigitAscii(2, txt[2]);
  alpha4.writeDigitAscii(3, txt[3]);
  alpha4.writeDisplay();
}
